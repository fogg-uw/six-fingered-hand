2^56
2^10
2^12
2^13
2^14
simulate_nets_in_R
simulate_nets_in_R = TRUE
if(simulate_nets_in_R) {
print('hi')
}
simulate_nets_in_R = FALSE
if(simulate_nets_in_R) {
print('hi')
}
?file.path
# output is "results.csv".
seed   =  9321
nnet   =  200                # number of networks per scenario
ntaxa  =  c(4, 6)            # number of taxa per network
lambda =  c(0.1, 0.3, 1, 3)  # speciation rate, in CUs
mu     =  c(0.1, 0.9)        # extinction rate, as a % of lambda
nu     =    0.5              # hybridization rate, as as % of lambda
MHY    =  c("M", "H")        # type of hybridization that is dominant
d_0    =  c(0.1, 0.3, 0.6)*2 # forbid hybridizations between lineages more than this % of 1/lambda away
model  =  1                  # ssa = 0, gsa = 1.  see hartmann wong stadler 2010
ngt    =  200                # number of gene trees per quartet
ncores_julia = 8
ncores_R     = 8 # just for looping over scenarios.  not for looping over nets
simulate_nets_in_R = FALSE
analyze_nets_in_julia = FALSE
julia  = "/u/f/o/fogg/julia-1.8.0/bin/julia"
R      = "Rscript"
#on john's machine: julia = "/home/john/julia-1.7.3/bin/julia"
#on franklin00: julia = "/u/f/o/fogg/julia-1.8.0/bin/julia"
timeout = "4h" # i don't know if i've ever seen it work in a time >13min but <20min
delete1 = FALSE # whether to simulate up to N+1 taxa, then delete 1 later
arg = commandArgs(trailingOnly=TRUE)
if(length(arg) > 1) error("too many args")
if(is.na(arg[1])) arg == 'rj'
if(arg=='r') simulate_nets_in_R = TRUE # if false, you need to provide the nets yourself
if(arg=='j') analyze_nets_in_julia = TRUE
if(arg=='rj') {
simulate_nets_in_R = TRUE
analyze_nets_in_julia = TRUE
}
# R will expand.grid the 10 parameter sets and ask SiPhyNetworks to simulate
# under every combination thereof ("scenario"), then pass the simulated networks to other
# julia + R scripts for further analysis.  the output is "results.csv": it has
# one row for every scenario, and summary statistics about each one.
# for example,
# as of 2022-08-19 there are 4 values for lambda, 2 for mu, 2
# for M, and 1 for all other parameters, so we have to test
# 4*2*2 = 16 scenarios.  results.csv will have 16 rows.
###
library(parallel)
library(tictoc, lib.loc=.libPaths()[1])
###
tic("main job")
scenarios = expand.grid(seed=seed,
nnet=nnet,
ntaxa=ntaxa,
lambda=lambda,
mu=mu,
nu=nu,
MHY=MHY,
d_0=d_0,
model=model,
ngt=ngt)
scenarios$mu  = scenarios$mu  * scenarios$lambda # convert to CUs
scenarios$nu  = scenarios$nu  * scenarios$lambda
scenarios$d_0 = scenarios$d_0 / scenarios$lambda
scenarios$seed = min(scenarios$seed) - 1 + 1:nrow(scenarios)
scenarios$M = 1/4 + (1/4)*as.numeric(scenarios$MHY=="M")
scenarios$Y = 1/4 + (1/4)*as.numeric(scenarios$MHY=="Y")
scenarios =
scenarios[
,
c("seed",
"nnet",
"ntaxa",
"lambda",
"mu",
"nu",
"M",
"Y",
"d_0",
"model",
"ngt"
)
]
View(scenarios)
